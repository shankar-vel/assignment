import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;

public class CompletableFutureDemo {

    public static CompletableFuture<String> fetchUserData(long userId) {
        return CompletableFuture.supplyAsync(() -> {
            if (userId == 0)
            {
                throw new RuntimeException(" user not found: " + userId);
            }
            try {
                Thread.sleep(1000); 
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
            return "UserData for ID " + userId;
        });
    }

    public static CompletableFuture<String> fetchAndCombineUserData(long userId1, long userId2) 
    {
        var future1 = fetchUserData(userId1)
            .exceptionally(ex -> "Error fetching user " + userId1 + ": " + ex.getMessage());
        
        var future2 = fetchUserData(userId2)
            .exceptionally(ex -> "Error fetching user " + userId2 + ": " + ex.getMessage());

        return future1.thenCombine(future2, (data1, data2) -> "Data1: " + data1 + ", Data2: " + data2);
    }

    public static void main(String[] args) throws ExecutionException, InterruptedException {
        var combinedFuture = fetchAndCombineUserData(101, 202); 
//	var combinedFuture = fetchAndCombineUserData(201, 0); 


        var res = combinedFuture.get();
        System.out.println(res);
    }
}
